{"version":3,"sources":["components/AutocompleteInput.module.css","redux/users_reducer.ts","api/api.ts","api/users_api.ts","components/AutocompleteInput.tsx","selectors/users_selectors.ts","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Users","instance","axios","create","baseURL","withCredentials","usersApi","get","then","res","data","Class","Key","initialState","users","usersActions","type","SET_USERS","getUsersSelector","state","usersPage","map","el","name","AutocompleteInput","useState","inputText","setInputText","isShow","setIsShow","active","setActive","filtered","setFiltered","usersNames","useSelector","dispatch","useDispatch","useEffect","a","toast","success","error","onClickHandler","e","target","innerText","className","s","outer","onChange","value","currentTarget","newFilteredSentences","filter","toLowerCase","indexOf","onKeyDown","key","Enter","ArrowUp","ArrowDown","length","placeholder","role","autocomplete","onClick","suggestion","index","Active","no_autocomplete","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2452a4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer\":\"AutocompleteInput_outer__wODJt\",\"no_autocomplete\":\"AutocompleteInput_no_autocomplete__2GCX5\",\"autocomplete\":\"AutocompleteInput_autocomplete__2plDl\",\"active\":\"AutocompleteInput_active__2D_jM\"};","import { toast } from 'react-hot-toast';\n\nimport { AppThunkType, GetActionsTypes } from './store';\n\nimport { GetUsersType, usersApi } from 'api/users_api';\n\nenum Users {\n  SET_USERS = 'nebucode_test_task/users_reducer/SET_USERS',\n}\n\nconst initialState = {\n  users: [] as GetUsersType[],\n};\n\nexport const usersReducer = (\n  state = initialState,\n  action: UsersActionTypes,\n): UsersPageInitialStateType => {\n  switch (action.type) {\n    case Users.SET_USERS:\n      return { ...state, users: [...action.users] };\n    default:\n      return state;\n  }\n};\n\nexport const usersActions = {\n  setUsers: (users: GetUsersType[]) =>\n    ({\n      type: Users.SET_USERS,\n      users,\n    } as const),\n};\n\nexport const getResponseUsers = (): AppThunkType => async dispatch => {\n  try {\n    const res = await usersApi.getUsers();\n    dispatch(usersActions.setUsers(res));\n    toast.success('Users have been received');\n  } catch (err) {\n    toast.error('Some error occurred');\n  }\n};\n\nexport type UsersPageInitialStateType = typeof initialState;\nexport type UsersActionTypes = GetActionsTypes<typeof usersActions>;\n","import axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/',\n  withCredentials: true,\n});\n","import { instance } from './api';\n\nexport const usersApi = {\n  getUsers() {\n    return instance.get<GetUsersType[]>(`users`).then(res => res.data);\n  },\n};\n\nexport type GetUsersType = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: GetUserAddressType;\n  phone: string;\n  website: string;\n  company: GetUserCompanyType;\n};\nexport type GetUserAddressType = {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n  geo: GetUserAddressGeoType;\n};\nexport type GetUserAddressGeoType = {\n  lat: string;\n  lng: string;\n};\nexport type GetUserCompanyType = {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n};\n","import React, {\n  FC,\n  useEffect,\n  useState,\n  KeyboardEvent,\n  ChangeEvent,\n  MouseEvent,\n} from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getResponseUsers } from '../redux/users_reducer';\nimport { getUsersSelector } from '../selectors/users_selectors';\nimport { ReturnComponentType } from '../types';\n\nimport s from './AutocompleteInput.module.css';\n\nenum Class {\n  Active = 'active',\n}\nenum Key {\n  Enter = 'Enter',\n  ArrowUp = 'ArrowUp',\n  ArrowDown = 'ArrowDown',\n}\n\nexport const AutocompleteInput: FC = (): ReturnComponentType => {\n  const [inputText, setInputText] = useState<string>('');\n  const [isShow, setIsShow] = useState<boolean>(false);\n  const [active, setActive] = useState<number>(-1);\n  const [filtered, setFiltered] = useState<string[]>([]);\n\n  const usersNames = useSelector(getUsersSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getResponseUsers());\n  }, [dispatch]);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    const { value } = e.currentTarget;\n    const newFilteredSentences = usersNames.filter(\n      (el: string) => el.toLowerCase().indexOf(value.toLowerCase()) > -1,\n    );\n    setActive(0);\n    setFiltered(newFilteredSentences);\n    setIsShow(true);\n    setInputText(e.currentTarget.value);\n  };\n\n  const onClickHandler = (e: MouseEvent<HTMLElement>): void => {\n    setActive(0);\n    setFiltered([]);\n    setIsShow(false);\n    const target = e.target as HTMLElement;\n    setInputText(target.innerText);\n  };\n\n  const onKeyDown = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === Key.Enter) {\n      setActive(0);\n      setIsShow(false);\n      setInputText(filtered[active]);\n    }\n    if (e.key === Key.ArrowUp) {\n      if (active !== -1) {\n        setActive(active - 1);\n      }\n    }\n    if (e.key === Key.ArrowDown) {\n      if (active !== filtered.length - 1) {\n        setActive(active + 1);\n      }\n    }\n  };\n\n  const renderAutocomplete = (): ReturnComponentType => {\n    if (isShow && inputText) {\n      if (filtered.length) {\n        return (\n          <ul role=\"presentation\" className={s.autocomplete} onClick={onClickHandler}>\n            {filtered.map((suggestion, index) => {\n              let className;\n              if (index === active) {\n                className = s[Class.Active];\n              }\n              return (\n                <li className={className} key={suggestion}>\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      }\n      return (\n        <div className={s.no_autocomplete}>\n          <span>Ooops... No such name â˜¹</span>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className={s.outer}>\n      <input\n        onChange={onChangeHandler}\n        onKeyDown={onKeyDown}\n        value={inputText}\n        placeholder=\"Search name...\"\n        type=\"text\"\n      />\n      {renderAutocomplete()}\n    </div>\n  );\n};\n","import { GetUsersType } from '../api/users_api';\nimport { AppRootStateType } from '../redux/store';\n\nexport const getUsersSelector = (state: AppRootStateType): string[] =>\n  state.usersPage.users.map((el: GetUsersType) => el.name);\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\n\nimport { UsersActionTypes, usersReducer } from './users_reducer';\n\nconst rootReducer = combineReducers({\n  usersPage: usersReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\nexport type AppActionType = UsersActionTypes;\nexport type GetActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U }\n  ? U\n  : never;\nexport type AppThunkType<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppRootStateType,\n  unknown,\n  AppActionType\n>;\n","import { FC } from 'react';\n\nimport { Provider } from 'react-redux';\n\nimport { AutocompleteInput } from './components/AutocompleteInput';\nimport { ReturnComponentType } from './types';\n\nimport { store } from 'redux/store';\n\nexport const App: FC = (): ReturnComponentType => (\n  <Provider store={store}>\n    <AutocompleteInput />\n  </Provider>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}